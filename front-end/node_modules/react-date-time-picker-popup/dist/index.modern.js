import React, { useRef, useEffect, useState } from 'react';

var styles = {"test":"_3ybTi"};

var styles$1 = {"popupAllPage":"_3D17u","popupDiv":"_1MuIM"};

function PopupComponent(props) {
  var useOutsideAlerter = function useOutsideAlerter(ref) {
    useEffect(function () {
      function handleClickOutside(event) {
        if (ref.current && !ref.current.contains(event.target)) {
          props.setVisible(false);
        }
      }

      document.addEventListener("mousedown", handleClickOutside);
      return function () {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, [ref]);
  };

  var wrapperRef = useRef(null);
  useOutsideAlerter(wrapperRef);
  return props.visible ? /*#__PURE__*/React.createElement("div", {
    className: styles$1.popupAllPage
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$1.popupDiv,
    ref: wrapperRef,
    style: {
      backgroundColor: props.BGColor
    }
  }, props.children)) : null;
}

var styles$2 = {"timeContainer":"_1hJZv","timeHours":"_3XUP3","hourDiv":"_3lCGN","selectedHourDiv":"_3LEck","disabledHourDiv":"_2l3k_","timeMinutes":"_1sBVS","minuteDiv":"_2Pla6","selectedMinuteDiv":"_8EDxV","disabledMinuteDiv":"_RwAyu"};

function Time(_ref) {
  var year = _ref.year,
      month = _ref.month,
      day = _ref.day,
      setDay = _ref.setDay,
      selectedMinute = _ref.selectedMinute,
      setSelectedMinute = _ref.setSelectedMinute,
      selectedHour = _ref.selectedHour,
      setSelectedHour = _ref.setSelectedHour,
      _ref$minuteInterval = _ref.minuteInterval,
      minuteInterval = _ref$minuteInterval === void 0 ? 5 : _ref$minuteInterval,
      _ref$disabledHours = _ref.disabledHours,
      disabledHours = _ref$disabledHours === void 0 ? [] : _ref$disabledHours,
      _ref$disabledMinutes = _ref.disabledMinutes,
      disabledMinutes = _ref$disabledMinutes === void 0 ? [] : _ref$disabledMinutes,
      _ref$BGColor = _ref.BGColor,
      BGColor = _ref$BGColor === void 0 ? 'rgb(44, 76, 104)' : _ref$BGColor;
  var hours = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];

  var createMinuteList = function createMinuteList(interval) {
    var list = [];

    for (var i = 0; i < 60; i++) {
      if (i % interval === 0) {
        list.push(i.toString().length > 1 ? i.toString() : "0" + i);
      }
    }

    return list;
  };

  var _useState = useState(createMinuteList(minuteInterval)),
      minutes = _useState[0];

  var useDidMountEffect = function useDidMountEffect(func, deps) {
    var didMount = useRef(false);
    useEffect(function () {
      if (didMount.current) func();else didMount.current = true;
    }, deps);
  };

  useDidMountEffect(function () {
    setDay(new Date(year, month, day.getDate(), selectedHour, selectedMinute));
  }, [selectedHour, selectedMinute]);
  return /*#__PURE__*/React.createElement("div", {
    className: styles$2.timeContainer,
    style: {
      backgroundColor: BGColor
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$2.timeHours
  }, hours.reverse().map(function (hour, i) {
    if (hour === selectedHour) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.selectedHourDiv,
        key: i
      }, hour);
    } else if (disabledHours.includes(hour)) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.disabledHourDiv,
        key: i
      }, hour);
    } else {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.hourDiv,
        key: i,
        onClick: function onClick() {
          setSelectedHour(hour);
        }
      }, hour);
    }
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$2.timeMinutes
  }, minutes.map(function (minute, i) {
    if (minute === selectedMinute) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.selectedMinuteDiv,
        key: i
      }, minute);
    } else if (disabledMinutes.includes(minute)) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.disabledMinuteDiv,
        key: i
      }, minute);
    } else {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$2.minuteDiv,
        key: i,
        onClick: function onClick() {
          setSelectedMinute(minute);
        }
      }, minute);
    }
  })));
}

var styles$3 = {"calendarContainer":"_3rDu9","calendarDaysContent":"_2fJfr","calendarHeader":"_1YSCl","calendarCurrentYear":"_1m64i","calendarCurrentMonth":"_3ec3A","calendarBeforeNext":"_1UuYB","calendarContent":"_1dvJm","contentRightSide":"_2Sh_S","calendarDaysNames":"_2ommc","calendarDayName":"_2WxJS","calendarDays":"_2umuz","calendarDayDiv":"_lRp58","calendarDay":"_2vk_9","selectedCalendarDay":"_3u1T8","beforeMonthDays":"_1qf7m","nextMonthDays":"_p7HGv","selectScreen":"_1GACr","selectArea":"_QlrDF","selectableDiv":"_3cjT6"};

function Month(_ref) {
  var year = _ref.year,
      lang = _ref.lang,
      setMonth = _ref.setMonth,
      setSelectScreen = _ref.setSelectScreen;
  var orderOfMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

  var onMonthClick = function onMonthClick(month) {
    setMonth(month);
    setSelectScreen(false);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectScreen
  }, orderOfMonths.map(function (month, i) {
    if (i % 3 === 0) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectArea,
        key: Math.random()
      }, /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        key: Math.random(),
        onClick: function onClick() {
          return onMonthClick(month);
        }
      }, new Date(year, month, 1).toLocaleString(lang, {
        month: 'long'
      })), /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        key: Math.random(),
        onClick: function onClick() {
          return onMonthClick(month + 1);
        }
      }, new Date(year, month + 1, 1).toLocaleString(lang, {
        month: 'long'
      })), /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        key: Math.random(),
        onClick: function onClick() {
          return onMonthClick(month + 2);
        }
      }, new Date(year, month + 2, 1).toLocaleString(lang, {
        month: 'long'
      })));
    }
  }));
}

function Years(_ref) {
  var year = _ref.year,
      setYear = _ref.setYear,
      setSelectScreen = _ref.setSelectScreen;

  var _useState = useState(function () {
    var max = parseInt(year) + 6;
    var min = max - 14;
    var list = [];

    for (var i = max; i >= min; i--) {
      list.push(i);
    }
    list.reverse();
    return list;
  }),
      years = _useState[0],
      setYears = _useState[1];

  var onYearClick = function onYearClick(event) {
    setYear(parseInt(event.target.getAttribute('value')));
    setSelectScreen(false);
  };

  var increaseYears = function increaseYears() {
    setYears(function () {
      var max = years[years.length - 1] + 10;
      var min = max - 5;
      var list = [];

      for (var i = max; i >= min; i--) {
        list.push(i);
      }
      list.reverse();
      return list;
    });
  };

  var decreaseYears = function decreaseYears() {
    setYears(function () {
      var max = years[0] - 5;
      var min = max - 5;
      var list = [];

      for (var i = max; i >= min; i--) {
        list.push(i);
      }
      list.reverse();
      return list;
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectScreen
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectArea,
    key: Math.random()
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    onClick: decreaseYears
  }, "..."), /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    value: years[0] - 2,
    onClick: onYearClick
  }, years[0] - 2), /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    value: years[0] - 1,
    onClick: onYearClick
  }, years[0] - 1)), years.map(function (month, i) {
    if (i % 3 === 0) {
      return /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectArea,
        key: Math.random()
      }, /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        value: years[i],
        key: Math.random(),
        onClick: onYearClick
      }, years[i]), /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        value: years[i + 1],
        key: Math.random(),
        onClick: onYearClick
      }, years[i + 1]), /*#__PURE__*/React.createElement("div", {
        className: styles$3.selectableDiv,
        value: years[i + 2],
        key: Math.random(),
        onClick: onYearClick
      }, years[i + 2]));
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectArea,
    key: Math.random()
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    value: years[years.length - 1] + 1,
    onClick: onYearClick
  }, years[years.length - 1] + 1), /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    value: years[years.length - 1] + 2,
    onClick: onYearClick
  }, years[years.length - 1] + 2), /*#__PURE__*/React.createElement("div", {
    className: styles$3.selectableDiv,
    onClick: increaseYears
  }, "...")));
}

var DefaultContext = {
  color: undefined,
  size: undefined,
  className: undefined,
  style: undefined,
  attr: undefined
};
var IconContext = React.createContext && React.createContext(DefaultContext);

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function Tree2Element(tree) {
  return tree && tree.map(function (node, i) {
    return React.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}

function GenIcon(data) {
  return function (props) {
    return React.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function (conf) {
    var attr = props.attr,
        size = props.size,
        title = props.title,
        svgProps = __rest(props, ["attr", "size", "title"]);

    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className) className = conf.className;
    if (props.className) className = (className ? className + ' ' : '') + props.className;
    return React.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className: className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && React.createElement("title", null, title), props.children);
  };

  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}

// THIS FILE IS AUTO GENERATED
function MdNavigateBefore (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"}},{"tag":"path","attr":{"d":"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}}]})(props);
}function MdNavigateNext (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"}},{"tag":"path","attr":{"d":"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}}]})(props);
}

function CalendarHeader(_ref) {
  var setSelectScreen = _ref.setSelectScreen,
      setShowMonths = _ref.setShowMonths,
      year = _ref.year,
      lang = _ref.lang,
      setMonth = _ref.setMonth,
      month = _ref.month,
      setYear = _ref.setYear;
  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarHeader
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarCurrentYear,
    onClick: function onClick() {
      setSelectScreen(true);
      setShowMonths(false);
    }
  }, year), /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarCurrentMonth,
    onClick: function onClick() {
      setSelectScreen(true);
      setShowMonths(true);
    }
  }, new Date(year, month, 1).toLocaleString(lang, {
    month: 'long'
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarBeforeNext
  }, /*#__PURE__*/React.createElement(MdNavigateBefore, {
    onClick: function onClick() {
      if (month === 0) {
        setYear(year - 1);
        setMonth(11);
      } else {
        setMonth(month - 1);
      }
    }
  }), /*#__PURE__*/React.createElement(MdNavigateNext, {
    onClick: function onClick() {
      if (month === 11) {
        setYear(year + 1);
        setMonth(0);
      } else {
        setMonth(month + 1);
      }
    }
  })));
}

function CalendarContent(_ref) {
  var getDayNames = _ref.getDayNames,
      beforeMonthDays = _ref.beforeMonthDays,
      numbers = _ref.numbers,
      nextMonthDays = _ref.nextMonthDays,
      findDayOfWeek = _ref.findDayOfWeek,
      lang = _ref.lang,
      month = _ref.month,
      year = _ref.year,
      selectedDay = _ref.selectedDay,
      setSelectedDay = _ref.setSelectedDay,
      selectedMinute = _ref.selectedMinute,
      setSelectedMinute = _ref.setSelectedMinute,
      selectedHour = _ref.selectedHour,
      setSelectedHour = _ref.setSelectedHour,
      timeSelector = _ref.timeSelector,
      minuteInterval = _ref.minuteInterval,
      disabledMinutes = _ref.disabledMinutes,
      disabledHours = _ref.disabledHours;
  var orderOfDays = [1, 2, 3, 4, 5, 6, 0];
  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarContent
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.contentLeftSide,
    style: {
      width: timeSelector ? '80%' : '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarDaysNames
  }, getDayNames(lang, 'short').map(function (day, i) {
    return /*#__PURE__*/React.createElement("div", {
      className: styles$3.calendarDayName,
      key: i
    }, day);
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarDays
  }, orderOfDays.map(function (day, i) {
    return /*#__PURE__*/React.createElement("div", {
      className: styles$3.calendarDayDiv,
      key: i
    }, beforeMonthDays.map(function (number, i) {
      if (findDayOfWeek(number, month - 1, year) === day) {
        return /*#__PURE__*/React.createElement("div", {
          className: styles$3.beforeMonthDays,
          key: i
        }, number);
      }
    }), numbers.map(function (number, i) {
      if (findDayOfWeek(number, month, year) === day) {
        if (number === selectedDay.getDate() && month === selectedDay.getMonth() && year === selectedDay.getFullYear()) {
          return /*#__PURE__*/React.createElement("div", {
            className: styles$3.selectedCalendarDay,
            key: i
          }, number);
        } else {
          return /*#__PURE__*/React.createElement("div", {
            className: styles$3.calendarDay,
            key: i,
            onClick: function onClick() {
              return setSelectedDay(new Date(year, month, number, selectedHour, selectedMinute));
            }
          }, number);
        }
      }
    }), nextMonthDays.map(function (number, i) {
      if (findDayOfWeek(number, month + 1, year) === day) {
        return /*#__PURE__*/React.createElement("div", {
          className: styles$3.nextMonthDays,
          key: i
        }, number);
      }
    }));
  }))), timeSelector ? /*#__PURE__*/React.createElement("div", {
    className: styles$3.contentRightSide
  }, /*#__PURE__*/React.createElement(Time, {
    year: year,
    month: month,
    day: selectedDay,
    setDay: setSelectedDay,
    selectedHour: selectedHour,
    setSelectedHour: setSelectedHour,
    selectedMinute: selectedMinute,
    setSelectedMinute: setSelectedMinute,
    minuteInterval: minuteInterval,
    disabledHours: disabledHours,
    disabledMinutes: disabledMinutes
  })) : null);
}

function Days(_ref) {
  var year = _ref.year,
      lang = _ref.lang,
      month = _ref.month,
      setMonth = _ref.setMonth,
      getDayNames = _ref.getDayNames,
      beforeMonthDays = _ref.beforeMonthDays,
      numbers = _ref.numbers,
      nextMonthDays = _ref.nextMonthDays,
      findDayOfWeek = _ref.findDayOfWeek,
      setSelectScreen = _ref.setSelectScreen,
      setShowMonths = _ref.setShowMonths,
      setYear = _ref.setYear,
      selectedDay = _ref.selectedDay,
      setSelectedDay = _ref.setSelectedDay,
      selectedMinute = _ref.selectedMinute,
      setSelectedMinute = _ref.setSelectedMinute,
      selectedHour = _ref.selectedHour,
      setSelectedHour = _ref.setSelectedHour,
      timeSelector = _ref.timeSelector,
      minuteInterval = _ref.minuteInterval,
      disabledMinutes = _ref.disabledMinutes,
      disabledHours = _ref.disabledHours;
  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarDaysContent
  }, /*#__PURE__*/React.createElement(CalendarHeader, {
    setSelectScreen: setSelectScreen,
    setShowMonths: setShowMonths,
    year: year,
    lang: lang,
    setMonth: setMonth,
    month: month,
    setYear: setYear
  }), /*#__PURE__*/React.createElement(CalendarContent, {
    getDayNames: getDayNames,
    beforeMonthDays: beforeMonthDays,
    numbers: numbers,
    nextMonthDays: nextMonthDays,
    findDayOfWeek: findDayOfWeek,
    year: year,
    lang: lang,
    month: month,
    selectedDay: selectedDay,
    setSelectedDay: setSelectedDay,
    selectedHour: selectedHour,
    setSelectedHour: setSelectedHour,
    selectedMinute: selectedMinute,
    setSelectedMinute: setSelectedMinute,
    timeSelector: timeSelector,
    minuteInterval: minuteInterval,
    disabledHours: disabledHours,
    disabledMinutes: disabledMinutes
  }));
}

var getDayNames = function getDayNames(locale, format) {
  if (locale === void 0) {
    locale = 'en';
  }

  if (format === void 0) {
    format = 'long';
  }

  var formatter = new Intl.DateTimeFormat(locale, {
    weekday: format,
    timeZone: 'UTC'
  });
  var days = [1, 2, 3, 4, 5, 6, 7].map(function (day) {
    var dd = day < 10 ? "0" + day : day;
    return new Date("2017-01-" + dd + "T00:00:00+00:00");
  });
  var arr = days.map(function (date) {
    return formatter.format(date);
  });
  var element = arr[0];
  arr.splice(0, 1);
  arr.splice(arr.length, 0, element);
  return arr;
};
var findDayOfWeek = function findDayOfWeek(num, month, year) {
  return new Date(year, month, num).getDay();
};
var lastDayOfMonth = function lastDayOfMonth(month, year) {
  return new Date(year, month + 1, 0).getDate();
};

function Calendar(_ref) {
  var lang = _ref.lang,
      selectedDay = _ref.selectedDay,
      setSelectedDay = _ref.setSelectedDay,
      _ref$timeSelector = _ref.timeSelector,
      timeSelector = _ref$timeSelector === void 0 ? true : _ref$timeSelector,
      _ref$minuteInterval = _ref.minuteInterval,
      minuteInterval = _ref$minuteInterval === void 0 ? 5 : _ref$minuteInterval,
      _ref$BGColor = _ref.BGColor,
      BGColor = _ref$BGColor === void 0 ? 'rgb(44, 76, 104)' : _ref$BGColor,
      disabledHours = _ref.disabledHours,
      disabledMinutes = _ref.disabledMinutes;

  var _useState = useState(new Date().getMonth()),
      month = _useState[0],
      setMonth = _useState[1];

  var _useState2 = useState(new Date().getFullYear()),
      year = _useState2[0],
      setYear = _useState2[1];

  var _useState3 = useState(''),
      selectedHour = _useState3[0],
      setSelectedHour = _useState3[1];

  var _useState4 = useState(''),
      selectedMinute = _useState4[0],
      setSelectedMinute = _useState4[1];

  var _useState5 = useState([]),
      beforeMonthDays = _useState5[0],
      setBMD = _useState5[1];

  var _useState6 = useState([]),
      nextMonthDays = _useState6[0],
      setNMD = _useState6[1];

  var _useState7 = useState(false),
      selectScreen = _useState7[0],
      setSelectScreen = _useState7[1];

  var _useState8 = useState(false),
      showMonths = _useState8[0],
      setShowMonths = _useState8[1];

  var _useState9 = useState(Array.from({
    length: lastDayOfMonth(month, year)
  }, function (_, i) {
    return i + 1;
  })),
      numbers = _useState9[0],
      setNumbers = _useState9[1];

  useEffect(function () {
    setNumbers(Array.from({
      length: lastDayOfMonth(month, year)
    }, function (_, i) {
      return i + 1;
    }));
    var pmd = [];

    if (findDayOfWeek(1, month, year) !== 1) {
      for (var i = lastDayOfMonth(month - 1, year); i > 0; i--) {
        if (findDayOfWeek(i, month - 1, year) === 1) {
          pmd.push(i);
          break;
        }

        pmd.push(i);
      }
    }

    setBMD(pmd);
    var nmd = [];

    if (findDayOfWeek(lastDayOfMonth(month, year), month, year) !== 0) {
      for (var _i = 1; _i < 8; _i++) {
        if (findDayOfWeek(_i, month + 1, year) === 0) {
          nmd.push(_i);
          break;
        }

        nmd.push(_i);
      }
    }

    setNMD(nmd);
  }, [month, year]);
  return /*#__PURE__*/React.createElement("div", {
    className: styles$3.calendarContainer,
    style: {
      backgroundColor: BGColor
    }
  }, selectScreen ? showMonths ? /*#__PURE__*/React.createElement(Month, {
    year: year,
    lang: lang,
    setMonth: setMonth,
    setSelectScreen: setSelectScreen
  }) : /*#__PURE__*/React.createElement(Years, {
    year: year,
    setYear: setYear,
    setSelectScreen: setSelectScreen
  }) : /*#__PURE__*/React.createElement(Days, {
    year: year,
    lang: lang,
    month: month,
    setMonth: setMonth,
    getDayNames: getDayNames,
    beforeMonthDays: beforeMonthDays,
    numbers: numbers,
    nextMonthDays: nextMonthDays,
    findDayOfWeek: findDayOfWeek,
    setShowMonths: setShowMonths,
    setSelectScreen: setSelectScreen,
    setYear: setYear,
    selectedDay: selectedDay,
    setSelectedDay: setSelectedDay,
    selectedHour: selectedHour,
    setSelectedHour: setSelectedHour,
    selectedMinute: selectedMinute,
    setSelectedMinute: setSelectedMinute,
    timeSelector: timeSelector,
    minuteInterval: minuteInterval,
    disabledHours: disabledHours,
    disabledMinutes: disabledMinutes
  }));
}

var ExampleComponent = function ExampleComponent(_ref) {
  var text = _ref.text;
  return /*#__PURE__*/React.createElement("div", {
    className: styles.test
  }, "Example Component: ", text);
};
var Popup = function Popup(_ref2) {
  var visible = _ref2.visible,
      setVisible = _ref2.setVisible,
      _ref2$BGColor = _ref2.BGColor,
      BGColor = _ref2$BGColor === void 0 ? 'rgb(44, 76, 104)' : _ref2$BGColor,
      children = _ref2.children;
  return /*#__PURE__*/React.createElement(PopupComponent, {
    visible: visible,
    setVisible: setVisible,
    BGColor: BGColor
  }, children);
};
var TimeSelector = function TimeSelector(_ref3) {
  var year = _ref3.year,
      month = _ref3.month,
      day = _ref3.day,
      setDay = _ref3.setDay,
      selectedMinute = _ref3.selectedMinute,
      setSelectedMinute = _ref3.setSelectedMinute,
      selectedHour = _ref3.selectedHour,
      setSelectedHour = _ref3.setSelectedHour,
      minuteInterval = _ref3.minuteInterval,
      _ref3$disabledHours = _ref3.disabledHours,
      disabledHours = _ref3$disabledHours === void 0 ? [] : _ref3$disabledHours,
      _ref3$disabledMinutes = _ref3.disabledMinutes,
      disabledMinutes = _ref3$disabledMinutes === void 0 ? [] : _ref3$disabledMinutes,
      _ref3$BGColor = _ref3.BGColor,
      BGColor = _ref3$BGColor === void 0 ? 'rgb(44, 76, 104)' : _ref3$BGColor;
  return /*#__PURE__*/React.createElement(Time, {
    year: year,
    month: month,
    day: day,
    setDay: setDay,
    selectedMinute: selectedMinute,
    setSelectedMinute: setSelectedMinute,
    selectedHour: selectedHour,
    setSelectedHour: setSelectedHour,
    minuteInterval: minuteInterval,
    disabledHours: disabledHours,
    disabledMinutes: disabledMinutes,
    BGColor: BGColor
  });
};
var DatePicker = function DatePicker(_ref4) {
  var lang = _ref4.lang,
      selectedDay = _ref4.selectedDay,
      setSelectedDay = _ref4.setSelectedDay,
      _ref4$timeSelector = _ref4.timeSelector,
      timeSelector = _ref4$timeSelector === void 0 ? true : _ref4$timeSelector,
      _ref4$minuteInterval = _ref4.minuteInterval,
      minuteInterval = _ref4$minuteInterval === void 0 ? 5 : _ref4$minuteInterval,
      _ref4$BGColor = _ref4.BGColor,
      BGColor = _ref4$BGColor === void 0 ? 'rgb(44, 76, 104)' : _ref4$BGColor,
      _ref4$disabledHours = _ref4.disabledHours,
      disabledHours = _ref4$disabledHours === void 0 ? [] : _ref4$disabledHours,
      _ref4$disabledMinutes = _ref4.disabledMinutes,
      disabledMinutes = _ref4$disabledMinutes === void 0 ? [] : _ref4$disabledMinutes;
  return /*#__PURE__*/React.createElement(Calendar, {
    lang: lang,
    selectedDay: selectedDay,
    setSelectedDay: setSelectedDay,
    timeSelector: timeSelector,
    minuteInterval: minuteInterval,
    BGColor: BGColor,
    disabledHours: disabledHours,
    disabledMinutes: disabledMinutes
  });
};

export { DatePicker, ExampleComponent, Popup, TimeSelector };
//# sourceMappingURL=index.modern.js.map
